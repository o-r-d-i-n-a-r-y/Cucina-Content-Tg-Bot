import config
import logging
import threading
import keyboard as kb
import pymysql
import hashlib
import json
import requests

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types.message import ContentType

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from alphabet_detector import AlphabetDetector

# for events
event_data = dict()

# for dishes
dish_data = dict()

# for cafes
cafe_data = dict()

# delete data (for all)
delete_data = dict()

#

class EventDishStates(Helper):
	mode = HelperMode.snake_case

	# event states
	S0 = ListItem() # event type
	S1 = ListItem()	# header state
	S2 = ListItem()	# content state
	S3 = ListItem()	# img state
	S4 = ListItem()	# city state
	S5 = ListItem()	# check state
	S6 = ListItem()	# correction state
	S7 = ListItem() # delete state

	# for all
	S8 = ListItem() # final state (for event, cafe and dish)

	# dish states
	SA = ListItem() # name state 9
	SB = ListItem() # category state 10
	SC = ListItem() # group state 11
	SD = ListItem() # desc state 12
	SE = ListItem() # img state 13
	SF = ListItem()	# check state 14
	SG = ListItem()	# correction state 15
	SH = ListItem() # delete state 16

	# for all
	SI = ListItem() # deletement refinement 17
	SJ = ListItem() # delete confirmation 18

	# i forgot to add some states
	SK = ListItem() # date state for event! 19
	SL = ListItem() # dish price 20

	# cafe states
	SM = ListItem() # address state 21
	SN = ListItem() # lat/lng state 22
	SO = ListItem() # password state 23
	SP = ListItem() # urls req. state 24
	SQ = ListItem() # city state 25
	SR = ListItem() # check state 26
	SS = ListItem() # correction state 27
	ST = ListItem() # delete state 28


# logging setup
logging.basicConfig(level = logging.INFO)

bot = Bot(token = config.TOKEN)
dp = Dispatcher(bot, storage = MemoryStorage())

# start message
@dp.message_handler(commands = ["start"], commands_prefix = "/")
async def on_start(message: types.Message):
	if(message.from_user.id == config.ADMIN_ID):
		state = dp.current_state(user = message.from_user.id)

		await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!ü§ó\n–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–±–æ—Ç–∞ —Å–µ—Ç–∏ –ø–∏—Ü—Ü–µ—Ä–∏–π Cucinaüçïüçïüçï" +
			"\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:" + "\n/add_event - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n/add_dish - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ")

		await state.set_state(EventDishStates.all()[8])


# add event cmd
@dp.message_handler(state = '*', commands = ["add_event"], commands_prefix = "/")
async def add_event(message: types.Message):
	if(message.from_user.id == config.ADMIN_ID):
		if(bool(dish_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			dish_data.clear()

		if(bool(cafe_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ñ–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			cafe_data.clear()

		state = dp.current_state(user = message.from_user.id)

		await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç–æ!‚úÖ\n–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–∏:\n0 - –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ" +
			"\n1 - –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å\n2 - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n3 - –ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å (–∑–∞–∫—Ä—ã—Ç–∏–µ –∏ —Ç–ø)")
		await state.set_state(EventDishStates.all()[0])
	else:
		await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!‚ùå\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")

# add dish cmd
@dp.message_handler(state = '*', commands = ["add_dish"], commands_prefix = "/")
async def add_dish(message: types.Message):
	if(message.from_user.id == config.ADMIN_ID):
		if(bool(event_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			event_data.clear()

		if(bool(cafe_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ñ–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			cafe_data.clear()

		state = dp.current_state(user = message.from_user.id)

		await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞—á–∞—Ç–æ!‚úÖ\n–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤):")
		await state.set_state(EventDishStates.all()[9])
	else:
		await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!‚ùå\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")

# add cafe cmd
@dp.message_handler(state = '*', commands = ["add_cafe"], commands_prefix = "/")
async def add_cafe(message: types.Message):
	if(message.from_user.id == config.ADMIN_ID):
		if(bool(dish_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			dish_data.clear()

		if(bool(event_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			event_data.clear()

		state = dp.current_state(user = message.from_user.id)

		await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ñ–µ –Ω–∞—á–∞—Ç–æ!‚úÖ\n–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
		await state.set_state(EventDishStates.all()[21])
	else:
		await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!‚ùå\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!")


# help cmd
@dp.message_handler(state = '*', commands = ["help"], commands_prefix = "/")
async def help_cmd(message: types.Message):
	await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" + 
		"\n/add_event - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n/add_dish - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ\n/add_cafe - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–∞—Ñ–µ" 
			+ "\n/delete - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ñ–µ/–±–ª—é–¥–æ/—Å–æ–±—ã—Ç–∏–µ")


# delete cmd
@dp.message_handler(state = '*', commands = ["delete"], commands_prefix = "/")
async def delete_cmd(message: types.Message):
	if(message.from_user.id == config.ADMIN_ID):
		if(bool(dish_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			dish_data.clear()
		elif(bool(event_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			event_data.clear()
		elif(bool(cafe_data)):
			await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ñ–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ö†")
			cafe_data.clear()

		state = dp.current_state(user = message.from_user.id)

		await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å‚ÑπÔ∏è", reply_markup = kb.inline_kb_delete)
		await state.set_state(EventDishStates.all()[17])

# refine deletement
@dp.message_handler(state = EventDishStates.SI)
async def refine_del(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text == "–°–æ–±—ã—Ç–∏–µüì∞"):
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

		delete_data["type"] = "events"

		await state.set_state(EventDishStates.all()[7])
	elif(message.text == "–ë–ª—é–¥–æüçΩ"):
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

		delete_data["type"] = "dishes"

		await state.set_state(EventDishStates.all()[16])
	elif(message.text == "–ö–∞—Ñ–µüè†"):
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–∞—Ñ–µ, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

		delete_data["type"] = "cafes"

		await state.set_state(EventDishStates.all()[28])

# event search to delete
@dp.message_handler(state = EventDishStates.S7)
async def refine_event_del(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	reply_text = text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (id - —Å–æ–±—ã—Ç–∏–µ):\n\n")

	connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
	cursor = connection.cursor()

	search_key = "%" + message.text + "%"
	select_query = "SELECT * FROM events WHERE HEADER LIKE %s;"
	cursor.execute(select_query, search_key)

	rows = cursor.fetchall()
	for row in rows:
		reply_text += str(row[0]) + " - " + row[3] + "\n\n"

	connection.commit()

	reply_text += "–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚ÑπÔ∏è"

	await message.answer(reply_text)
	await state.set_state(EventDishStates.all()[18])

# dish search to delete
@dp.message_handler(state = EventDishStates.SH)
async def refine_dish_del(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	reply_text = text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (id - –Ω–∞–∑–≤–∞–Ω–∏–µ):\n\n")

	connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
	cursor = connection.cursor()

	search_key = "%" + message.text + "%"
	select_query = "SELECT * FROM dishes WHERE NAME LIKE %s;"
	cursor.execute(select_query, search_key)

	rows = cursor.fetchall()
	for row in rows:
		reply_text += str(row[0]) + " - " + row[1] + "\n\n"

	connection.commit()

	reply_text += "–í–≤–µ–¥–∏—Ç–µ id –±–ª—é–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚ÑπÔ∏è"

	await message.answer(reply_text)
	await state.set_state(EventDishStates.all()[18])

# cafe search to delete
@dp.message_handler(state = EventDishStates.ST)
async def refine_cafe_del(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	reply_text = text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (id - –Ω–∞–∑–≤–∞–Ω–∏–µ):\n\n")

	connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
	cursor = connection.cursor()

	search_key = "%" + message.text + "%"
	select_query = "SELECT * FROM cafes WHERE ADDRESS LIKE %s;"
	cursor.execute(select_query, search_key)

	rows = cursor.fetchall()
	for row in rows:
		reply_text += str(row[0]) + " - " + row[4] + "\n\n"

	connection.commit()

	reply_text += "–í–≤–µ–¥–∏—Ç–µ id –∫–∞—Ñ–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚ÑπÔ∏è"

	await message.answer(reply_text)
	await state.set_state(EventDishStates.all()[18])

# dish/event delete
@dp.message_handler(state = EventDishStates.SJ)
async def delete_dish_event(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	delete_data["id"] = int(message.text)

	connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
	cursor = connection.cursor()

	del_query = ""
	if(delete_data["type"] == "events"):
		del_query = "DELETE FROM events WHERE ID = %s;"
	elif(delete_data["type"] == "dishes"):
		del_query = "DELETE FROM dishes WHERE ID = %s;"
	else:
		del_query = "DELETE FROM cafes WHERE ID = %s;"

	cursor.execute(del_query, delete_data["id"])

	connection.commit()

	delete_data.clear()

	await message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ‚úÖ")
	await state.set_state(EventDishStates.all()[8])


# event type request
@dp.message_handler(state = EventDishStates.S0)
async def request_name(message: types.Message):
	if(message.text.isdigit() and len(message.text) == 1):
		if(int(message.text) <= 3 and int(message.text) >= 0):
			state = dp.current_state(user = message.from_user.id)

			event_data["type"] = int(message.text)
			await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 35 —Å–∏–º–≤–æ–ª–æ–≤):")

			await state.set_state(EventDishStates.all()[1])
		else:
			await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 3!")
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3!")

# event name request
@dp.message_handler(state = EventDishStates.S1)
async def request_name(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 35):
		event_data["header"] = message.text

		await message.answer("–û—Ç–ª–∏—á–Ω–æ!üòâ\n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
		await state.set_state(EventDishStates.all()[2])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 35 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# event content request
@dp.message_handler(state = EventDishStates.S2)
async def request_content(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 500):
		event_data["content"] = message.text

		await message.answer("–•–æ—Ä–æ—à–æ!\n–î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–î.–ú–ú.–ì–ì–ì–ì")
		await state.set_state(EventDishStates.all()[19])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# event end-date request
@dp.message_handler(state = EventDishStates.SK)
async def request_date(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) == 10):
		event_data["end-date"] = message.text

		await message.answer("–•–æ—Ä–æ—à–æ!\n–î–∞–ª–µ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è.\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç https://postimg.cc"
			 + "\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é \'Direct link!\'‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[3])

# event img-url request
@dp.message_handler(state = EventDishStates.S3)
async def request_img(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	event_data["img-url"] = message.text

	# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–æ–π —Å—Ç—Ä–æ–∫–∞

	reply_text = text("–£–∂–µ –ø–æ—á—Ç–∏!üôÉ\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥(-–∞), –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.", 
		"\n1 - –ö–∏–µ–≤\n2 - –•–∞—Ä—å–∫–æ–≤\n3 - –õ—å–≤–æ–≤\n4 - –î–Ω–µ–ø—Ä\n5 - –û–¥–µ—Å—Å–∞\n6 - –ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫\n7 - –•–µ—Ä—Å–æ–Ω",
		"\nall - –î–ª—è –≤—Å–µ—Ö\n", bold("\n–í–≤–æ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤‚ö†Ô∏è\n"), "–ù–∞–ø—Ä–∏–º–µ—Ä:", italic("\n1457\nall"), sep = "")

	await message.answer(reply_text, parse_mode = ParseMode.MARKDOWN)
	await state.set_state(EventDishStates.all()[4])

# event city request
@dp.message_handler(state = EventDishStates.S4)
async def request_city(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if((message.text.isdigit() or message.text == "all") and (len(message.text) <= 7)):
		if(message.text != "all"):
			for num in message.text:
				if(int(num) > 7 or int(num) < 1):
					await message.answer("‚ùå–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞!‚ùå")
					return

		event_data["city"] = message.text

		city_list = ["–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–õ—å–≤–æ–≤", "–î–Ω–µ–ø—Ä", "–û–¥–µ—Å—Å–∞", "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫", "–•–µ—Ä—Å–æ–Ω"]
		types = {0: "–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ", 1: "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", 2: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 3: "–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å"}
		cities = ""

		if(event_data["city"] != "all"):
			for i in range(0, len(event_data["city"])):
				cities += str(city_list[int(event_data["city"][i]) - 1]) + "\n"
		else:
			cities = "–í—Å–µ –≥–æ—Ä–æ–¥–∞\n"

		await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.\n\n"
			+ "–¢–∏–ø: " + types[event_data["type"]] + "\n\n" + event_data["header"] + "\n" + event_data["content"] + "\n\n–ì–æ—Ä–æ–¥–∞:\n" + cities + "\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: "
			+ event_data["img-url"] + "\n\n" + event_data["end-date"],
			 reply_markup = kb.inline_kb_full)

		await state.set_state(EventDishStates.all()[5])
	else:
		await message.answer("‚ùå–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Ä–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞!‚ùå")

# event confirmation
@dp.message_handler(state = EventDishStates.S5)
async def event_confirmation_request(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text == '–î–∞‚úÖ'):
		# creating insert query
		connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
		cursor = connection.cursor()

		insert_query = "INSERT INTO events(TYPE, HEADER, CONTENT, IMG_URL, CITY, END_DATE) VALUES(%s, %s, %s, %s, %s, %s);"	
		cursor.execute(insert_query, (event_data["type"], event_data["header"], event_data["content"], event_data["img-url"], event_data["city"], event_data["end-date"]))

		connection.commit()

		#receiver = "/topics/" + str(event_data["city"])
		
		condition = ""
		
		if(event_data["city"] != "all" and len(event_data["city"]) < 5):
		    for(i in range len(event_data["city"])):
		        char = event_data["city"][i]
		        
		        condition += "'" + char + "'" + " in topics"
		        
		        if(i != len(event_data["city"] - 1):
		            condition += " || "
        else:
            condition = "'all' in topics"

		headers = {
		        'Content-Type': 'application/json',
		        'Authorization': 'key=' + config.FCM_SERVER_TOKEN,
		      }

		body = {
		          'notification': {'title': event_data["header"],
		                            'body': event_data["content"],
		                            'image': event_data["img-url"]
		                            },
		          #'to':
                      #receiver,
                  'condition': condition,  
		          'priority': 'high',
		        }

		requests.post("https://fcm.googleapis.com/fcm/send", headers = headers, data=json.dumps(body))

		event_data.clear()

		await message.answer("–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!üòé\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
		await state.set_state(EventDishStates.all()[8])
	elif(message.text == '–ù–µ—Ç‚ùå'):
		await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ö†Ô∏è\n–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!")
		await message.answer("–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ü–∏—Ñ—Ä–æ–π), –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.\n\n"
			+ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" + "1 - –¢–∏–ø\n" + "2 - –ó–∞–≥–æ–ª–æ–≤–æ–∫\n" + "3 - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ\n" + "4 - –ö–∞—Ä—Ç–∏–Ω–∫–∞\n" + "5 - –ì–æ—Ä–æ–¥\n" + "delete - –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n\n"
			+ "–ü—Ä–∏–º–µ—Ä:\n" + "2 –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –≥–æ—Ä–æ–¥–µ –õ—å–≤–æ–≤!")

		await state.set_state(EventDishStates.all()[6])

# event correction
@dp.message_handler(state = EventDishStates.S6)
async def event_correction(message: types.Message):
	corrected = False

	state = dp.current_state(user = message.from_user.id)

	if(message.text[0].isdigit() and len(message.text) >= 3):
		if(int(message.text[0]) == 1):
			if(len(message.text) == 3 and message.text[2].isdigit()):
				if(int(message.text[2]) <= 3 and int(message.text[2]) >= 0):
					event_data["type"] = int(message.text[2])

					corrected = True
				else:
					await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
		elif(int(message.text[0]) == 2):
			if(len(message.text[2:]) <= 35):
				event_data["header"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
		elif(int(message.text[0]) == 3):
			if(len(message.text[2:]) <= 500):
					event_data["content"] = message.text[2:]

					corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
		elif(int(message.text[0]) == 4):
			event_data["img-url"] = message.text[2:]

			await state.set_state(EventDishStates.all()[5])

			corrected = True
		elif(int(message.text[0]) == 5):
			if((message.text[2:].isdigit() and len(message.text[2:]) <= 7) or (message.text[2:] == "all")):
				event_data["city"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
		else:
			await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
	elif(message.text == "delete"):
		event_data.clear()
		await message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[8])
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!‚ö†Ô∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

	# resending confirmation msg (if it was corrected)
	if(corrected):
		await message.answer("–ü—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å–µ–Ω—ã!")
		await state.set_state(EventDishStates.all()[5])

		city_list = ["–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–õ—å–≤–æ–≤", "–î–Ω–µ–ø—Ä", "–û–¥–µ—Å—Å–∞", "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫", "–•–µ—Ä—Å–æ–Ω"]
		types = {0: "–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ", 1: "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", 2: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 3: "–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å"}
		cities = ""

		if(event_data["city"] != "all"):
			for i in range(0, len(event_data["city"])):
				cities += str(city_list[int(event_data["city"][i]) - 1]) + "\n"
		else:
			cities = "–í—Å–µ –≥–æ—Ä–æ–¥–∞\n"

		await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.\n\n"
				+ "–¢–∏–ø: " + types[event_data["type"]] + "\n\n" + event_data["header"] + "\n" + event_data["content"] +
				 "\n\n–ì–æ—Ä–æ–¥–∞:\n" + cities + "\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + event_data["img-url"],
				 reply_markup = kb.inline_kb_full)


# dish name
@dp.message_handler(state = EventDishStates.SA)
async def set_dish_name(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 25):
		dish_data["name"] = message.text

		await message.answer("–ß—É–¥–Ω–æ! –î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n1 - –ì–æ—Ç–æ–≤–æ–µ –º–µ–Ω—é\n2 - –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ")
		await state.set_state(EventDishStates.all()[10])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# dish category
@dp.message_handler(state = EventDishStates.SB)
async def set_dish_category(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text.isdigit() and len(message.text) == 1):
		if(int(message.text) == 1 or int(message.text) == 2):
			dish_data["category"] = int(message.text)

			reply_text = "–•–æ—Ä–æ—à–æ!\n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (—Å–≤–µ—Ä—å—Ç–µ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏; –Ω–µ –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è)\n\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n"

			connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
			cursor = connection.cursor()

			select_query = "SELECT DISH_GROUP FROM dishes WHERE CATEGORY = %s;"
			cursor.execute(select_query, dish_data["category"])

			categories = cursor.fetchall()
			for category in categories:
				if(reply_text.find(str(category[0])) == -1):
					reply_text += str(category[0]) + "\n"

			connection.commit()

			await message.answer(reply_text)
			await state.set_state(EventDishStates.all()[11])
		else:
			await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!‚ö†Ô∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!‚ö†Ô∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

# dish group
@dp.message_handler(state = EventDishStates.SC)
async def set_dish_group(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 25):
		dish_data["group"] = message.text

		await message.answer("–û—Ç–ª–∏—á–Ω–æ!üôÉ\n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞/–º–µ–Ω—é (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
		await state.set_state(EventDishStates.all()[12])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# dish desc.
@dp.message_handler(state = EventDishStates.SD)
async def set_dish_desc(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 100):
		dish_data["desc"] = message.text

		await message.answer("–•–æ—Ä–æ—à–æ!\n–î–∞–ª–µ–µ –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –±–ª—é–¥–∞:")
		await state.set_state(EventDishStates.all()[20])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# dish price
@dp.message_handler(state = EventDishStates.SL)
async def set_dish_price(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 5):
		dish_data["price"] = int(message.text)

		await message.answer("–•–æ—Ä–æ—à–æ!\n–î–∞–ª–µ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –±–ª—é–¥–∞.\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç https://postimg.cc"
		 + "\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é \'Direct link!\'‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[13])
	else:
		await message.answer("‚ùå–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã!‚ùå")

# dish img
@dp.message_handler(state = EventDishStates.SE)
async def set_dish_img(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	dish_data["img-url"] = message.text

	# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–æ–π —Å—Ç—Ä–æ–∫–∞

	category = ""
	if(dish_data["category"] == 1):
		category = "–ì–æ—Ç–æ–≤–æ–µ –º–µ–Ω—é"
	else:
		category = "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ"

	await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ.\n\n"
				+ "–ù–∞–∑–≤–∞–Ω–∏–µ: " + dish_data["name"] + "\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category + "\n\n–ì—Ä—É–ø–ø–∞: " + dish_data["group"] + "\n\n–¶–µ–Ω–∞: " + str(dish_data["price"]) +
				 "\n\n–û–ø–∏—Å–∞–Ω–∏–µ: " + dish_data["desc"] + "\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + dish_data["img-url"],
				 reply_markup = kb.inline_kb_full)

	await state.set_state(EventDishStates.all()[14])

# dish sending confirmation
@dp.message_handler(state = EventDishStates.SF)
async def conf_dish(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text == '–î–∞‚úÖ'):
		# creating insert query
		connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
		cursor = connection.cursor()

		insert_query = "INSERT INTO dishes(NAME, CATEGORY, DISH_GROUP, DESCRIPTION, IMG_URL, PRICE) VALUES(%s, %s, %s, %s, %s, %s);"	
		cursor.execute(insert_query, (dish_data["name"], dish_data["category"], dish_data["group"], dish_data["desc"], dish_data["img-url"], dish_data["price"]))

		connection.commit()

		dish_data.clear()

		await message.answer("–ù–æ–≤–æ–µ –±–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!üòé\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup = None)
		await state.set_state(EventDishStates.all()[8])
	elif(message.text == '–ù–µ—Ç‚ùå'):
		await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ö†Ô∏è\n–ë–ª—é–¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!")
		await message.answer("–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ü–∏—Ñ—Ä–æ–π), –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.\n\n"
			+ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" + "1 - –ò–º—è\n" + "2 - –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n" + "3 - –ì—Ä—É–ø–ø–∞\n" + "4 - –û–ø–∏—Å–∞–Ω–∏–µ\n" + "5 - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n" + "delete - –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ\n\n"
			+ "–ü—Ä–∏–º–µ—Ä:\n" + "3 –î–µ—Å–µ—Ä—Ç")

		await state.set_state(EventDishStates.all()[15])

# dish correction
@dp.message_handler(state = EventDishStates.SG)
async def corr_dish(message: types.Message):
	corrected = False

	state = dp.current_state(user = message.from_user.id)

	if(message.text[0].isdigit() and len(message.text) >= 3):
		if(int(message.text[0]) == 1):
			if(len(message.text[2:]) <= 25):
				dish_data["name"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")
		elif(int(message.text[0]) == 2):
			if(len(message.text) == 3 and message.text[2].isdigit()):
				dish_data["category"] = message.text[2]

				corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∏–¥–µ \"–ù–û–ú–ï–†_–ü–ê–†–ê–ú–ï–¢–†–ê –ù–û–ú–ï–†_–ö–ê–¢–ï–ì–û–†–ò–ò\"‚ö†Ô∏è")
		elif(int(message.text[0]) == 3):
			if(len(message.text[2:]) <= 25):
				dish_data["group"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")
		elif(int(message.text[0]) == 4):
			if(len(message.text[2:]) <= 100):
				dish_data["desc"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")
		elif(int(message.text[0]) == 5):
			dish_data["img-url"] = message.text[2:]

			corrected = True
	elif(message.text == "delete"):
		dish_data.clear()
		await message.answer("–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ!‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[8])
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

	if(corrected):
		await message.answer("–ü—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å–µ–Ω—ã!")
		await state.set_state(EventDishStates.all()[14]) #!!!

		category = ""
		if(dish_data["category"] == 1):
			category = "–ì–æ—Ç–æ–≤–æ–µ –º–µ–Ω—é"
		else:
			category = "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ"

		await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ.\n\n"
					+ "–ù–∞–∑–≤–∞–Ω–∏–µ: " + dish_data["name"] + "\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category + "\n\n–ì—Ä—É–ø–ø–∞: " + dish_data["group"] +
					 "\n\n–û–ø–∏—Å–∞–Ω–∏–µ: " + dish_data["desc"] + "\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + dish_data["img-url"],
					 reply_markup = kb.inline_kb_full)


# address state
@dp.message_handler(state = EventDishStates.SM)
async def req_address(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(len(message.text) <= 150):
		cafe_data["address"] = message.text

		await message.answer("–û—Ç–ª–∏—á–Ω–æ!üòâ\n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–õ–ì/–®–†–¢:")
		await state.set_state(EventDishStates.all()[22])
	else:
		await message.answer("‚ùå–î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤!‚ùå")

# lat-lng state
@dp.message_handler(state = EventDishStates.SN)
async def req_latlng(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	sl_index = message.text.find('/')
	if(sl_index != -1):
		cafe_data["longitude"] = float(message.text[:sl_index])
		cafe_data["latitude"] = float(message.text[(sl_index + 1):])

		await message.answer("–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–∞—Ñ–µ (–¥–æ–ø—É—Å—Ç–∏–º—ã –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã):")
		await state.set_state(EventDishStates.all()[23])
	else:
		await message.answer("‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚ùå")

# password state
@dp.message_handler(state = EventDishStates.SO)
async def req_password(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	ad = AlphabetDetector()
	if(ad.is_latin(message.text)):
		cafe_data["password"] = message.text
		cafe_data["urls_left"] = 5
		cafe_data["urls"] = []

		await message.answer("–î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–∞—Ñ–µ (–æ—Å—Ç–∞–ª–æ—Å—å - " + str(cafe_data["urls_left"]) + ")."
		 + "\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∞–π—Ç https://postimg.cc"
			 + "\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é \'Direct link!\'‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[24])
	else:
		await message.answer("‚ùå–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –ø–∞—Ä–æ–ª—å - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã‚ùå")

# img-urls state
@dp.message_handler(state = EventDishStates.SP)
async def req_urls(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	cafe_data["urls_left"] -= 1
	cafe_data["urls"].append(message.text)

	if(cafe_data["urls_left"] > 0):
		await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–∞—Ñ–µ (–æ—Å—Ç–∞–ª–æ—Å—å - " + str(cafe_data["urls_left"]) + "):")
	else:
		await message.answer("–ü–æ—á—Ç–∏ –∫–æ–Ω–µ—Ü!" +
			"\n–î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥\n\n1 - –ö–∏–µ–≤\n2 - –•–∞—Ä—å–∫–æ–≤\n3 - –õ—å–≤–æ–≤\n4 - –î–Ω–µ–ø—Ä\n5 - –û–¥–µ—Å—Å–∞\n6 - –ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫\n7 - –•–µ—Ä—Å–æ–Ω")
		await state.set_state(EventDishStates.all()[25])

# city code state
@dp.message_handler(state = EventDishStates.SQ)
async def req_city(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text.isdigit() and len(message.text) == 1):
		cafe_data["city"] = int(message.text)
		city_list = ["–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–õ—å–≤–æ–≤", "–î–Ω–µ–ø—Ä", "–û–¥–µ—Å—Å–∞", "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫", "–•–µ—Ä—Å–æ–Ω"]

		urls_str = ""
		for url in cafe_data["urls"]:
			urls_str += url + "\n"

		await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n"
			+ "–ê–¥—Ä–µ—Å: " + cafe_data["address"] + "\n\n–ì–æ—Ä–æ–¥:\n" + city_list[cafe_data["city"] - 1] + "\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
			+ urls_str + "\n" + "–î–æ–ª–≥–æ—Ç–∞ - —à–∏—Ä–æ—Ç–∞: " + str(cafe_data["longitude"]) + " - " + str(cafe_data["latitude"])  + "\n\n" + "–ü–∞—Ä–æ–ª—å: " + cafe_data["password"],
			 reply_markup = kb.inline_kb_full)
		await state.set_state(EventDishStates.all()[26])
	else:
		await message.answer("‚ùå–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –≥–æ—Ä–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞‚ùå")

# cafe check state
@dp.message_handler(state = EventDishStates.SR)
async def req_cafe_conf(message: types.Message):
	state = dp.current_state(user = message.from_user.id)

	if(message.text == '–î–∞‚úÖ'):
		connection = pymysql.connect(host = "remotemysql.com", user = "Z95oaSNemg", passwd = "LcLasxSSeZ", database = "Z95oaSNemg")
		cursor = connection.cursor()

		insert_query = "INSERT INTO cafes(LATITUDE, LONGITUDE, ADDRESS, PASSWORD, IMG_URLS, CITY) VALUES(%s, %s, %s, %s, %s, %s);"

		cursor.execute(insert_query, (cafe_data["latitude"], cafe_data["longitude"], cafe_data["address"],
			hashlib.md5(cafe_data["password"].encode()).hexdigest(), json.dumps(cafe_data["urls"]), cafe_data["city"]))

		connection.commit()
		cafe_data.clear()

		await message.answer("–ù–æ–≤–æ–µ –∫–∞—Ñ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!üòé\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup = None)
		await state.set_state(EventDishStates.all()[8])
	elif(message.text == '–ù–µ—Ç‚ùå'):
		await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ö†Ô∏è\n–ö–∞—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!")
		await message.answer("–°–ø–µ—Ä–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ü–∏—Ñ—Ä–æ–π), –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.\n\n"
			+ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" + "1 - –ê–¥—Ä–µ—Å\n" + "2 - –ì–æ—Ä–æ–¥\n" + "3 - –î–æ–ª–≥–æ—Ç–∞/–®–∏—Ä–æ—Ç–∞\n" + "4 - –ü–∞—Ä–æ–ª—å\n"
			 + "5 - –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|[–ù–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã (–Ω–∞—á. –æ—Ç 0)]\n" + "delete - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ñ–µ\n\n"
			+ "–ü—Ä–∏–º–µ—Ä:\n" + "5 https://postimg.cc/some_image.jpg|2")

		await state.set_state(EventDishStates.all()[27])

# cafe correction state
@dp.message_handler(state = EventDishStates.SS)
async def req_cafe_corr(message: types.Message):
	corrected = False

	state = dp.current_state(user = message.from_user.id)

	if(message.text[0].isdigit() and len(message.text) >= 3):
		if(int(message.text[0]) == 1):
			if(len(message.text[2:]) <= 150):
				cafe_data["address"] = message.text[2:]

				corrected = True
			else:
				await message.answer("–î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 —Å–∏–º–≤–æ–ª–æ–≤‚ö†Ô∏è")
		elif(int(message.text[0]) == 2):
			if(len(message.text) == 3 and message.text[2].isdigit()):
				cafe["city"] = int(message.text[2])

				corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∏–¥–µ \"–ù–û–ú–ï–†_–ü–ê–†–ê–ú–ï–¢–†–ê –ù–û–ú–ï–†_–ö–ê–¢–ï–ì–û–†–ò–ò\"‚ö†Ô∏è")
		elif(int(message.text[0]) == 3):
			sl_pos = message.text.find("/")
			if(sl_pos != -1):
				cafe_data["longitude"] = float(message.text[2:sl_pos])
				cafe_data["latitude"] = float(message.text[(sl_pos + 1):])

				corrected = True
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∏–¥–µ \"–ù–û–ú–ï–†_–ü–ê–†–ê–ú–ï–¢–†–ê –î–õ–ì/–®–†–¢\"‚ö†Ô∏è")
		elif(int(message.text[0]) == 4):
			—Åafe_data["password"] = message.text[2:]

			corrected = True
		elif(int(message.text[0]) == 5):
			divider_pos = message.text.find("|")

			if(divider_pos != -1):
				cafe_data["urls"][divider_pos + 1] = message.text[2:divider_pos]
			else:
				await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∏–¥–µ \"–ù–û–ú–ï–†_–ü–ê–†–ê–ú–ï–¢–†–ê URL|[–ù–û–ú–ï–† –°–°–´–õ–ö–ò –î–õ–Ø –ó–ê–ú–ï–ù–´]\"‚ö†Ô∏è")

			corrected = True
	elif(message.text == "delete"):
		cafe_data.clear()
		await message.answer("–ö–∞—Ñ–µ —É–¥–∞–ª–µ–Ω–æ!‚ö†Ô∏è")
		await state.set_state(EventDishStates.all()[8])
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

	if(corrected):
		await message.answer("–ü—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å–µ–Ω—ã!")
		await state.set_state(EventDishStates.all()[26])

		city_list = ["–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–õ—å–≤–æ–≤", "–î–Ω–µ–ø—Ä", "–û–¥–µ—Å—Å–∞", "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫", "–•–µ—Ä—Å–æ–Ω"]

		urls_str = ""
		for url in cafe_data["urls"]:
			urls_str += url + "\n"

		await message.answer("–ì–æ—Ç–æ–≤–æ!ü•≥\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–∏—Ç–µ '–î–∞‚úÖ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ '–ù–µ—Ç‚ùå', —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n"
			+ "–ê–¥—Ä–µ—Å: " + cafe_data["address"] + "\n\n–ì–æ—Ä–æ–¥:\n" + city_list[cafe_data["city"] - 1] + "\n\n–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
			+ urls_str + "\n" + "–î–æ–ª–≥–æ—Ç–∞ - —à–∏—Ä–æ—Ç–∞: " + str(cafe_data["longitude"]) + " - " + str(cafe_data["latitude"])  + "\n\n" + "–ü–∞—Ä–æ–ª—å: " + cafe_data["password"],
			 reply_markup = kb.inline_kb_full)


# final state (neutral)
@dp.message_handler(state = EventDishStates.S8)
async def final_state_reply(message: types.Message):
	if(message.text != "/add_dish" and message.text != "/add_event" and message.text != "/help" and message.text != "/delete"):
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /help")

# run long-polling
if __name__ == "__main__":
	executor.start_polling(dp, skip_updates = True)
